class Solution:
    def minFlipsMonoIncr(self, S: str) -> int:
        n = len(S);
        cnt0 = S.count("0");
        cnt1 = 0;
        res = n - cnt0;
        for num in S:
            if num == '0':
                cnt0 -= 1;
            else:
                res = min(res, cnt0 + cnt1);
                cnt1 += 1;
        return res;


#思路分析：
#假设经过最优解的翻转使其变成了 s = '0'*i + '1'*j
#其实我们要决定的是在原字符串中选择哪一个位置的’1’，使其作为最优解中的第一个’1’！
#
#例如对于示例2中的010110，假设我们选择index=1处的’1’作为开头的’1’，那么我们需要
#将后面所有的’0’全部翻转成’1’，翻转次数取决于后面’0’的个数。
#
#又假设我们选取index=3处的’1’作为开头的’1’，那么我们需要将前面所有的'1'翻转成0，
#将后面所有的'0'翻转成'1'，翻转次数取决于前面’1’的个数和后面’0’的个数。
#
#OK，那我们只要一直记录着当前位置的前面有多少个1，后面有多少个0即可！
#注意：可能存在最后全为0的情况（如示例3），那么我们是选不到某个’1’作为开头的，所以
#我们先将全部翻转成’0’所花费的次数作为初始默认次数，然后和我们每次计算的结果比较即可。