78. Subsets(Mid):
Backtracking,  Lexicographic (Binary Sorted) Subsets
https://leetcode.com/problems/subsets/solution/

79. Word Search(Mid).py

120. Triangle

152. Maximum Product Subarray

746. Min Cost Climbing Stairs(Easy).py

1217. Play with Chips(Easy).py

1275. Find Winner on a Tic Tac Toe Game(Easy).py

1337. The K Weakest Rows in a Matrix(Easy).py

heapq --- 堆队列算法
这个模块提供了堆队列算法的实现，也称为优先队列算法。

堆是一个二叉树，它的每个父节点的值都只会小于或大于所有孩子节点（的值）。它使用了数组来实现：
 从零开始计数，对于所有的 k ，都有 heap[k] <= heap[2*k+1] 和 heap[k] <= heap[2*k+2]。 
 为了便于比较，不存在的元素被认为是无限大。 堆最有趣的特性在于最小的元素总是在根结点：heap[0]。

heapq.heappush(heap, item)
将 item 的值加入 heap 中，保持堆的不变性。

heapq.heappop(heap)
弹出并返回 heap 的最小的元素，保持堆的不变性。如果堆为空，抛出 IndexError 。使用 heap[0] ，可以只访问最小的元素而不弹出它

1351. Count Negative Numbers in a Sorted Matrix(Easy).py

1365. How Many Numbers Are Smaller Than the Current Number(Easy).py

1380. Lucky Numbers in a Matrix(Easy)